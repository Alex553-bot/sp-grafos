public ArrayList<Horario> componerPrograma(ArrayList<Actividad> camino, ArrayList<Horario> horario) {
        // esto se resuelve por dfs.
        if (camino.size()==1) {
            int i=0;
            Actividad a = camino.get(0);
            
            while (horario.size()==0 && i<a.getHorario().size()) {
                if (!a.getHorario().get(i).ocupado()) {
                    horario.add(a.getHorario().get(i));
                }
                i++;
            }
            return horario;
        }

        Stack<AristaAct> stack = new Stack<>();
        int index = 0;
        for (AristaAct arista : grafo.getAdyacentes(camino.get(0))) {
            index = camino.size()>1? 1:0;
            if (arista.getDestino() == grafo.obtenerIndex(camino.get(index))
                    && !arista.getHorarioOrigen().ocupado()
                    && !arista.getHorarioDestino().ocupado()) {
                stack.add(arista);
                horario.add(arista.getHorarioOrigen());
                
                while (!stack.empty()) {
                    AristaAct actual = stack.pop();
                    index++;
                    horario.add(actual.getHorarioDestino());
                    
                    if (horario.get(index-2).getFin().compareTo(horario.get(index-1).getInicio())==1) {
                        horario.remove(index-1);
                        return horario;
                    }

                    if (camino.get(camino.size() - 1).getHorario().contains(actual.getHorarioDestino())) {
                        return horario;
                    }

                    

                    // aqui agregamos
                    boolean auxiliar = false;
                    for (AristaAct ac : grafo.getAristasEntre(camino.get(index-1), camino.get(index))) {
                        if ( 
                                !ac.getHorarioOrigen().ocupado()
                                && !ac.getHorarioDestino().ocupado()
                            ) {
                            auxiliar = true;
                            stack.push(ac);
                        }
                    }
                    if (!auxiliar) {
                        index--;
                        horario.remove(horario.size() - 1);
                    }

                }

            }
        }
        return null;

    }

    